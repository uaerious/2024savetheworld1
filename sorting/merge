# merge sort (p) O(n log n)
def merge_sort(names):
    # Base case: If the list has 1 or 0 elements, it is already sorted
    if len(names) > 1:
        mid = len(names) // 2
        left_half = names[:mid]
        right_half = names[mid:]

        # Recursively sort the left and right halves
        merge_sort(left_half)
        merge_sort(right_half)

        # Merge the sorted left and right halves
        merge(names, left_half, right_half)

def merge(names, left, right):
    i = j = k = 0

    # Merge the two sorted arrays
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            names[k] = left[i]
            i += 1
        else:
            names[k] = right[j]
            j += 1
        k += 1

    # Check for any remaining elements in the left array
    while i < len(left):
        names[k] = left[i]
        i += 1
        k += 1

    # Check for any remaining elements in the right array
    while j < len(right):
        names[k] = right[j]
        j += 1
        k += 1

# Example usage
unsorted_names = ["Alice", "Charlie", "Bob", "David", "Eva"]
print("Unsorted Names:", unsorted_names)

# Apply merge sort to alphabetically sort the names
merge_sort(unsorted_names)
print("Sorted Names:", unsorted_names)
